import numpy as np
import matplotlib.pyplot as plt

# Define function for creating angled lines
def angled_line(x, slope, intercept):
    return slope * x + intercept

# Define function for creating wavy lines
def wavy_line(x, amplitude, frequency, phase):
    return amplitude * np.sin(2 * np.pi * frequency * x + phase)

# Generate array of x values
x = np.linspace(0, 10, 1000)

# Define parameters for angled lines
# num_lines = 30
# line_spacing = 0.2
# slope = 0.5

# Define parameters for wavy lines
num_curves = 30
curve_spacing = 0.5
amplitude = 0.1
frequency = 0.8

# Generate y values for angled lines
# y_lines = []
# for i in range(num_lines):
#     intercept = i * line_spacing
#     y_line = angled_line(x, slope, intercept)
#     y_lines.append(y_line)

# Generate y values for wavy curves
y_curves = []
for i in range(num_curves):
    phase = i * curve_spacing
    y_curve = wavy_line(x, amplitude, frequency, phase)
    y_curves.append(y_curve)

# Plot angled lines and wavy curves
fig, ax = plt.subplots(figsize=(8, 8), facecolor='none')
# for i in range(num_lines):
#     ax.plot(x, y_lines[i], color='black', linewidth=0.5)
for i in range(num_curves):
    ax.plot(x, y_curves[i], color='black', linewidth=0.5)

# Set y-axis limits to accommodate range of values generated by wavy_line function
y_min = min(y_curves[0]) - amplitude
y_max = max(y_curves[0]) + amplitude
ax.set_ylim(y_min, y_max)

# Remove gridlines
ax.grid(False)

# Remove axes and ticks
ax.set_axis_off()
ax.tick_params(axis='both', length=0, width=0)
for spine in ax.spines.values():
    spine.set_visible(False)

# Set plot background to transparent
ax.patch.set_alpha(0.0)

# Save as SVG file with transparent background
fig.savefig('moire_pattern.svg', transparent=True)
